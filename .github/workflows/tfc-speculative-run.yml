name: Terraform Cloud Speculative Run

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.terraform-version'

permissions:
  contents: read
  pull-requests: write

env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
  CONFIG_DIRECTORY: '.'

jobs:
  terraform-cloud-speculative-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload Terraform configuration (speculative)
        id: upload
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.2
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create speculative plan run
        id: run
        continue-on-error: true
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.2
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: true
          message: "Speculative plan triggered from GitHub Actions for ${{ github.event.pull_request.head.sha }}"

      - name: Fetch plan output
        id: plan-output
        if: steps.run.outputs.plan_id
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.2
        with:
          plan: ${{ steps.run.outputs.plan_id }}

      - name: Upsert Terraform Cloud plan comment
        if: github.event_name == 'pull_request' && steps.plan-output.outputs.plan_json
        uses: actions/github-script@v7
        env:
          PLAN_ADD: ${{ steps.plan-output.outputs.add }}
          PLAN_CHANGE: ${{ steps.plan-output.outputs.change }}
          PLAN_DESTROY: ${{ steps.plan-output.outputs.destroy }}
          RUN_LINK: ${{ steps.run.outputs.run_link }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Summary');
            });
            const output = `#### Terraform Cloud Plan Summary\n\n` +
              `Plan: ${process.env.PLAN_ADD} to add, ${process.env.PLAN_CHANGE} to change, ${process.env.PLAN_DESTROY} to destroy.\n` +
              `[View run in Terraform Cloud](${process.env.RUN_LINK})`;
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              });
            }

      - name: Fail if run did not complete successfully
        if: steps.run.outputs.run_status != 'planned_and_finished'
        run: |
          echo "Terraform Cloud run did not reach planned_and_finished state"
          echo "Status: ${{ steps.run.outputs.run_status }}"
          echo "Run URL: ${{ steps.run.outputs.run_link }}"
          exit 1
